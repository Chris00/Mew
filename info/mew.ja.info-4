Info file: mew.ja.info,    -*-Text-*-
produced by `texinfo-format-buffer'
from file `mew.texi'
using `texinfmt.el' version 2.42 of  7 Jul 2006.

INFO-DIR-SECTION Message User Agent
START-INFO-DIR-ENTRY
* Mew-J: (mew.ja.info).      Messaging in the Emacs World.
* Mew: (mew.info).           Messaging in the Emacs World.
END-INFO-DIR-ENTRY






File: mew.ja.info, Node: unmark, Next: mark change, Prev: escape mark, Up: Marks

マークの消去
============

Deleting marks
==============

`o' マークや `D' マークが付いたメッセージは、マーク実行コマンド `x' を
押さない限り処理されません。よって、`x' を押す前に、マークを取り止める
コマンド `u' でマークを消せば、誤ってメッセージを消すことはありません。
Refiling and deleting is not processed unless you type `x'. So, if you
press `u' to unmark before you type `x', messages do not disappear
accidentally.

以下にマークを消去するコマンドをまとめます。Here is a summary for
unmark commands.

`u'
     現在のメッセージのマークを消す。
`U'
     入力したマークが付いているすべてのメッセージのマークを消す。
`u'
     Cancel the mark on this message.
`U'
     Cancel all marks according to what you input.

`$' マークを使って `*' マークを待避し、なんらかの操作をし、元に戻す方法
は、目に見えるので分りやすいです。しかしながら、`$' マークが付いている
メッセージは、マークが付いているので目的の操作の対象外になるかもしれま
せん。The method with the `$' mark, that is, preserve the `*' marks
and operate something then get them back, is friendly to users since
it is visible. But since messages are marked, they would not be the
targets of the operation.

このため `U*' で消去した `*' マークを復活させるコマンドがあります。それ
は、`M*' です。この方法は、復活できるマークは目に見えないので分りにくい
かもしれません。しかしながら、マークが消えているので、そのメッセージは
確実に目的の操作の対象になります。To solve this problem, a method to
recover `*' marks is provided.  The command is bound to `M*'. This
method would not be friendly to users since the `*' marks to recover
are invisible. But because the marks are canceled, these message are
surely the target of any operations.

`M*'
     一番最後の `U*' で消した `*' マークを復活させる。
`M*'
     Recover the `*' marks which are canceled by the last `U*'.




File: mew.ja.info, Node: mark change, Next: sync, Prev: unmark, Up: Marks

マークの変換
============

Overwriting marks
=================

マークには強さのレベルがあります。同じレベルのマークは上書きできます。
強いマークは弱いマークを上書きできます。Marks have levels of
strength. You can override a mark by another same-level mark weak
mark. Also stronger marks can override weaker marks.

マークを強い順に示します。The followings shows the marks in the strong
order:

`o'、`D'、`X'
     新たにマークしたときは、次のメッセージを表示。上書きした場合は、そ
     の行に留まる。
`*' と `$'
     マークを付けた後は、その行に留まる。
`U'
     マークを付けた後は、その行に留まる。
`o', `D', and `X'
     After marking a message newly, the next message is shown. After
     overriding another mark, the cursor stays on the message.
`*' and `$'
     After marking a message, the cursor stays on the message.
`U'
     After marking a message, the cursor stays on the message.

強いマークを付けた後にカーソルが動く方向については、*Note
summary-mode:: を参照して下さい。Refer to *Note summary-mode:: to know
which direction the cursor moves after putting a strong mark.

マークは以下のように交換できます。You can exchange marks as follows:

`m$'
     `*' -> `$' :: `*' マークを一時的に保存。
`m*'
     `$' -> `*' :: `*' マークを元に戻す。
`ms'
     `$' <-> `*'
`mM-u'
     `*' -> `U' :: 選択コマンド `?' で選んだメッセージを未読にするとき
     に便利。
`md'
     `*' -> `D' :: 選択コマンド `?' で選んだメッセージを消去するときに
     便利。
`mM-d'
     `*' -> `X' :: 選択コマンド `?' で選んだメッセージを消去するときに
     便利。
`mo'
     `*' -> `o' :: 選択コマンド `?' で選んだメッセージをあるフォルダに
     移動させる場合に便利。
`mc'
     `*' -> `o' :: 選択コマンド `?' で選んだメッセージをあるフォルダに
     コピーする場合に便利。
`e'
     最初に入力したマークを次に入力したマークへ変換する。ただし、`o' マー
     クは対象外。
`m$'
     `*' -> `$' :: Preserve the `*' marks temporarily.
`m*'
     `$' -> `*' :: Get the `*' marks back.
`ms'
     `$' <-> `*'
`mM-u'
     `*' -> `U' :: It is useful when you put `U' marks to messages
     picked by `?'.
`md'
     `*' -> `D' :: It is useful when you put `D' marks to messages
     picked by `?'.
`mM-d'
     `*' -> `X' :: It is useful when you put `X' marks to messages
     picked by `?'.
`mo'
     `*' -> `o' :: It is useful when you put `o' marks to messages to
     be moved picked by `?'.  `*' -> `o' :: It is useful when you put
     `o' marks to messages to be copied picked by `?'.
`e'
     Exchange the first input mark to the second one. The `o' mark is
     not exchangeable.



File: mew.ja.info, Node: sync, Next: off-line, Prev: mark change, Up: Marks

IMAP サーバとのマークの整合性
=============================

Mark consistency against an IMAP server
=======================================

Mew では、以下のマークに対し、IMAP サーバと整合性を確保できます。Mew
can maintain consistency of the following marks against an IMAP
server:

`U'
     メッセージを読んだか否か。IMAP のフラグは \Seen。通常は %inbox の
     みで有効。
`*'
     注目しているメッセージ。IMAP のフラグは \Flagged。
`U'
     Whether a message is read or not. This IMAP flag is \Seen. This
     is usually valid in %inbox only.
`*'
     Review mark. This IMAP flag is \Flagged.

オフラインの操作を許すために、Mew ではユーザが動作を起こすたびに IMAP
サーバとマークの整合性を取ります。定期的に整合性を取ることはしません。
Mew がマークの整合性を取る方法を以下に示します。To allow off-line
operations, Mew synchronizes marks with an IMAP server everytime when
a user makes an action. Mew does not automatically synchronize marks
repeatedly. The followings are how Mew synchronizes marks.

  1. `s' + 'update
        - 既存のメッセージに対して変更したマークをサーバ側へ反映
        - 新着メッセージに対しては、サーバ側のフラグをマークへ反映

  2. `x'
        - 既存のメッセージに対して変更したマークをサーバ側へ反映

  3. `s' + 'sync
        - 既存のメッセージに対して変更したマークをサーバ側へ反映
        - 既存のメッセージの `*',`U', `$', ` ' マークを一旦クリア
        - サーバ側のフラグを既存のメッセージにマークとして反映
        - サーバ側で削除されたメッセージを削除
  4. `s' + 'update
        - Reflecting modified marks of the existing messages to the server
        - For newly arrived messages, reflecting flags of the server
          to the messages.

  5. `x'
        - Reflecting modified marks of the existing messages to the server

  6. `s' + 'sync
        - Reflecting modified marks of the existing messages to the server
        - Clearing `*',`U', `$', ` ' mark on the existing messages.
        - Reflecting flags of the server to the existing messages
        - Removing messages which were deleted in the server



File: mew.ja.info, Node: off-line, Next: mew-mark, Prev: sync, Up: Marks

IMAP のためのマークのオフライン処理
===================================

Processing marks off-line for IMAP
==================================

IMAP ユーザは、フォルダ A のメッセージをキャッシュし、出先で `o' マーク
や `D' マークを付け、その場でそれらのマークを処理したくなることがありま
す。この場合、その後ネットワークに接続したときに、それらの処理が IMAP
サーバに反映されて欲しいと思います。An IMAP user may want to cache
messages in folder A and go out. Then he may want to put the `o'
and/or `D' marks, and process the marks off-line. In this story, these
jobs should be done in his IMAP server after connecting the Internet.

通常 IMAP では、メッセージをフォルダ A からフォルダ B へ移動させた場合、
フォルダ A にキャッシュされているそのメッセージを削除し、IMAP サーバか
らネットワークを通じ、フォルダ B へそのメッセージをキャッシュし直す必要
があります。なぜなら、フォルダ A にキャッシュされているメッセージに付随
する IMAP の情報は、フォルダ A 内でのみ有効だからです。If a message in
folder A is moved to folder B with IMAP, the cached message in folder
A usually must be deleted and a corresponding message in folder B must
be retrieved from his IMAP server again. This is because information
embedded in a cached message in folder A is valid only in folder A.

出先でフォルダ A のメッセージをフォルダ B へ整理したとしましょう。仮に、
そのメッセージをフォルダ B で読むためには、ネットワークに接続してその処
理を IMAP サーバに反映し、IMAP サーバから取り直さないといけないとすると
不便です。欲を言えば、出先でフォルダ B へ整理したメッセージは、IMAP サー
バから取り直さなくとも、フォルダ B へ移動すれば読めるようになっていて欲
しいと思います。Suppose you refile a message in folder A to folder B
off-line. It is very inconvenient for you to retrieve a corresponding
message in folder B from your IMAP server , in order to read it, after
refile jobs are done online. You may want to read the messages refiled
to folder B by just going to the folder B, without retrieval form the
IMAP server.

Mew では、メッセージ処理を後から IMAP サーバへ反映することと、IMAP サー
バからメッセージを再取得しなくても移動先のフォルダでメッセージを読める
ことの両方を実現しています。ネットワークに接続していない状況で、マーク
を処理するには、`lx' を使用して下さい。`lx' を実行すると、以下の処理が
なされます。
Mew implements delayed jobs processing and viewing refiled messages
without retrieval. If you want to process marks off-line, type `lx'.
`lx' carries out the following jobs.

  1. `o' マークや `D' マークのついたメッセージがフォルダ A からなくなる。
  2. この処理はメッセージ形式で、%queue に溜る。
  3. `o' マークのついたメッセージは、ローカルでフォルダ B へ移動され、
     無効なメッセージとして扱われる。
  4. Deleting messages marked with `o' and/or `D' from folder A.
  5. Queuing these jobs in %queue.
  6. Moving messages marked with `o' to folder B and marking them
     invalid.

無効なメッセージとは、読むことはできるが、`o' マークや `D' マークをつけ
られないものをいいます。無効なメッセージには、`#' マークが付いています。
`g' を使って、フォルダ B へ行くと、無効なメッセージの一覧が自動的に表示
されます。'invalid' means that you can read it but you cannot put the
`o'/`D' mark on it. Invalid messages are marked with `#'. When you go
to folder B by typing `g', a list of invalid messages is displayed
automatically.

ネットワークに接続した後に、%queue に溜っている処理を IMAP サーバに反映
させるには、%queue で `C-cC-c' と入力して下さい。If you want to let
your IMAP server process jobs in %queue after you get back online,
type `C-cC-c' in %queue.

IMAP サーバに処理を反映した後に、フォルダ B で `s' を押すと、無効なメッ
セージが削除され、有効なメッセージがキャッシュされます。Typing `s' in
folder B after jobs in %queue are done in your IMAP server results in
deletion of invalid messages and caching valid messages.



File: mew.ja.info, Node: mew-mark, Next: Refile, Prev: off-line, Up: Marks

Mew が表示するマーク
====================

Marks displayed by Mew
======================

以下に Mew が表示するマークをまとめます。Here is a summary of marks
displayed by Mew.

`M'
     マルチパートを表すマーク。*Note multipart:: を参照のこと。
`-'
     Multipart/Alternative を表すマーク。*Note analysis:: を参照のこと。
`T'
     メッセージが切り詰められたことを表すマーク。*Note retrieving:: を
     参照のこと。
`S'
     署名を表すマーク。*Note cipher-viewing:: を参照のこと。
`E'
     暗号化を表すマーク。*Note cipher-viewing:: を参照のこと。
`P'
     分割されていることを示すマーク。*Note target mark:: を参照のこと。
`#'
     メッセージが無効であることを示すマーク。*Note off-line:: を参照の
     こと。
`M'
     This message is a multipart. Please refer to *Note multipart::.
`-'
     This message contains a Multipart/Alternative content. Please refer to
     *Note analysis::.
`T'
     This message was truncated by Mew. Please refer to *Note
     retrieving::.
`S'
     This message is signed. Please refer to *Note cipher-viewing::.
`E'
     This is a cipher message. Please refer to *Note cipher-viewing::.
`P'
     This message is fragmented. Please refer to *Note target mark::.
`#'
     This message is invalid. Please refer to *Note off-line::.




File: mew.ja.info, Node: Refile, Next: by-folder, Prev: mew-mark, Up: Top

楽々整理整頓
************

Happy refiling
**************

1 日に数百のメッセージを受け取るようになると整理整頓が大変になります(え、
そんなに受け取らないですって？ 幸せですね :) 。Mew では、`o' でメッセー
ジを整頓する際に、整頓先を推測し初期値として表示してくれます。たとえば、
次のようになります。When you come to receive hundreds of messages in a
day (do not you believe it?), refiling messages becomes a very tough
job. Mew neatly guesses default folders where the message is supposed
to be refiled when you type `o'. You can see an example below.

     Folder name (+work/mew-dist): +

もし、() の中の初期値が自分の希望通りであれば、`RET' を押すだけでよいの
です。整頓先が決定しているメッセージには、`o' マークが付きます。If the
default value in () is proper, just type `RET'. The messages will be
marked with `o' if its refiling folders are decided.

メッセージを移動できるのは、そのメッセージが属している「世界」の中での
みです。前述のように世界はケースと修飾子によって定まります。整頓先のフォ
ルダを指定する場合には、ケースを付けず、同じ修飾子を持つフォルダ名を入
力する必要があります。ケースを付けない理由は、そのメッセージのケースは
すでに定まっているからです。ミニバッファからフォルダ名を入力する際、ケー
スが "default" でないにも関わらずケースを明示的に入力しないのは、整頓先
を指定する場合のみです。
You can refile a message to folders of the same world to which the
message belong. As described above, a world is identified by a
combination of "case" and proto. When you input a folder to which the
message is refiled, you must not specify "case" and you must input a
folder whose proto is the same. The reason why you must not specify
"case" is that the "case" is already known. With other commands, you
have to specify the "case", if necessary, when you input folder name
in minibuffer. This command is only the exception.

`o' に似たコマンドに `c' があります。両者の違いは、*Note refile mark::
を参照して下さい。Mew also provides `c' which is very similar to
`o'. To know the difference, please refer to *Note refile mark::.

この整頓先の推測が賢ければ賢い程ユーザは楽になります。Mew では以下のよ
うな規則が用意されています。As you know, the more excellent refiling
guess algorithms become, the less user's job troublesome. Mew provides
you with the following rules.

* Menu:

* by-folder::                   メーリングリスト用のフォルダから推測
* by-alist::                    指定した規則から推測
* by-thread::                   対話関係から推測
* by-from-folder::              個人用のフォルダから推測
* by-from::                     From: から推測
* by-newsgroups::               Newsgroups: から推測
* by-default::                  デフォルトの規則
* guess-rule::                  規則の制御
* auto-refile::                 自動で整理整頓
* copy-msg::                    世界を越えたメッセージのコピー
* by-folder::                   Guess by mailing-list folders
* by-alist::                    Guess by user defined rules
* by-thread::                   Guess by thread
* by-from-folder::              Guess by private folders
* by-from::                     Guess by From:
* by-newsgroups::               Guess by Newsgroups:
* by-default::                  Guess by default rule
* guess-rule::                  Controlling rules
* auto-refile::                 Auto refile
* copy-msg::                    Copying messages across worlds



File: mew.ja.info, Node: by-folder, Next: by-alist, Prev: Refile, Up: Refile

メーリングリスト用のフォルダから推測
====================================

Guess by mailing-list folders
=============================

あるメーリングリスト宛のメッセージを、そのメーリングリスト名のフォルダ
に整理することは多いと思います。Mew ではメーリングリスト宛に届いたメッ
セージに対して、それ用のフォルダを推測する機能があります。Many users
tend to refile messages destined to a mailing-list to a folder whose
name is the same as the mailing-list. Mew provides a mechanism to
guess a mailing-list folder for messages destined to mailing-lists.

たとえば、+misc/pooh-lovers というフォルダがあったとしましょう。次のよ
うなメッセージは、このフォルダに整頓すればよい可能性が高いといえます。
Suppose that you have a folder named +misc/pooh-lovers. The following
message is probably to be refiled to this folder.

     To: pooh-lovers@example.org

このように、To: や Cc: のアドレスが、フォルダ名の一番右側にマッチするも
のがないか探すわけです。フォルダを階層化していない人が多いようですが、
Mew を使う限り、階層化しない手はありません。Likewise, Mew searches a
matching folder forward with addresses on To: and Cc:. There are many
people who do not use recursive folders. With Mew, however, you would
not be smart if you do not use it.

さて、鋭い人は次のように個人のアドレスが To: や Cc: にある場合、困るの
ではないかと思うでしょう。Smart users may wonder that they get a
trouble in the following situation where private addresses are on To:
or Cc:.

     To: piglet@example.org
     Cc: pooh-lovers@example.org

たとえば、pooh は pooh-lovers の一員ですから、このメッセージが届きます。
しかし、piglet と仲がいいので、+from/piglet にマッチしてしまいます。
Since Pooh is a member of pooh-lovers, he receives this message. But
he has a folder for his friend, Piglet. So, +from/piglet may be
chosen.

そこで、Mew では無視するフォルダを設定できるようになっています。デフォ
ルトでは、+from 以下を無視します。ですから、個人からのメッセージは
+from 以下に収めて下さいTo avoid this, Mew allows you to specify which
folders are to be ignored. The default is +from. So, please take a
convention to refile personal messages under +from.

候補が決定できたらWhen Mew guesses a candidate by the folders, it asks
you:

     Folder name (+misc/pooh-lovers): +

と訊いてきます。あっていれば `RET' を、違っていればお望みのフォルダを入
力して下さい。Just type `RET' if the default is exactly what you want.

`o' で新しいフォルダを指定すると、そのフォルダが自動的に作成され、次か
らは推測用の候補にも加わります。便利でしょ？If you specify a new
folder with `o', the folder is created and added to the folder list to
be used for guess. Convenient, isn't it?

この機能を提供する関数は `mew-refile-guess-by-folder' です。
The function name to provide this feature is
`mew-refile-guess-by-folder'.

もし、フォルダ名に大文字を使っていないなら、以下の設定により、この関数
が高速になります。If you don't use capital letters for folder names,
configure as follows to make this function faster:

     (setq mew-use-fast-refile t)

デフォルトでは、末端のフォルダと中間のフォルダが候補の対象となっていま
す。もし、中間のフォルダではなく、末端のフォルダだけを選びたい場合は、
以下のように設定して下さい。By default, candidate includes node
folders as well as leaf folders.  If you want to not select node
folders but leave folders only, configure as follows:

     (setq mew-use-node-folder nil)



File: mew.ja.info, Node: by-alist, Next: by-thread, Prev: by-folder, Up: Refile

指定した規則から推測
====================

Guess by user defined rules
===========================

フォルダ名から推測する機能だけでは、思うようなフォルダを推測してくれな
い場合があります。たとえば、To: が staff@example.jp であるメッセージと
To: が staff@example.net であるメッセージに対し、フォルダ名からの推測で
は同じフォルダ(たとえば、"+net/staff")が選ばれてしまいます。そこで、
Mew では、変数 `mew-refile-guess-alist' に明示的に規則を設定できます。
(`mew-refile-guess-alist' は、必ず新しい書式で書いて下さい。詳しくは
*Note config2:: を参照のこと。)
There are some cases where the refile guess mechanism by folders does
not work as you wish. For example, for both a message whose To: is
staff@example.jp and another message whose To: is staff@example.net,
the same folder would be selected with guess by folders
(e.g. "+net/staff"). So, Mew allows you to define your own rules
explicitly. (You must use the new format for
`mew-refile-guess-alist'.  For more information, see

1 つ例を挙げてみましょう。Let's look at an example.

     (setq mew-refile-guess-alist
       '(("To:"
           ("staff@example.jp"  "+jp/staff")
           ("staff@example.net" "+net/staff"))))

これは、メッセージヘッダ中の To: の横の文字列に staff@example.jp があれ
ば +jp/staff へ、staff@example.net があれば +net/staff へ整頓するという
意味です。This means that if To: contains staff@example.jp +jp/staff
is selected and if To: has staff@example.net +net/staff is chosen.

規則は、以下のように書きます。The format of this rule is as follow:

     rule ::= '<rule>
     <rule> ::= ((<key> <alist>) (<key> <alist>) ... [<special>])

全体は (<key> <alist>) のリストです。<key> はフィールド名を書きます。
<alist> は以下のようになります。The whole is a list of (<key>
<alist>). A field name is specified for <key>. The format for <alist>
is as follows:

     <alist> ::= (<value> <folder>|<rule>) (<value> <folder>|<rule>) ...

<value> は <key> で示したフィールドにくる値です。<folder> は <key> にマッ
チした際にどのフォルダに整頓するかを意味しています。<folder> の代りに
<rule> を再帰的に記述することもできます。
<value> is a field value for <key>. <folder> means a folder to be
chosen if matched. You can write <rule> recursively instead of
<folder>.
*Note config2::.)

特殊な <key> として `nil' と `t' があります。`nil' は、何も推測できなかっ
た場合に返す <folder> を指定するために用います。`t' は、推測した値に加
えて返す <folder> を指示するために使います。There are two special
<key>s: `nil' and `t'. `nil' is used to specify <folder> to be
returned when nothing is guessed. `t' can specify <folder> to be
returned in addition to guessed values.

     <special> ::= (t <folder>) | (nil <folder>)

正規表現を知っている人は、以下のような複雑な規則を設定できます。If you
know regular expression, a more advanced rule can be defined like
this.

     (setq mew-refile-guess-alist
       '(("Newsgroups:"
         ("^nifty\\.\\([^ ]+\\)" "+Nifty/\\1")
         (".*"                   "+rec/news"))
        ("To:"
         ("\\(inet\\|wide\\)@wnoc-fuk" "+wide/\\1-wnoc-fuk"))
        ("From:"
         ("uucp@"    "+adm/uucp")
         ("ftpsync@" "+adm/ftpsync"))
        (nil "+unknown")))

この機能を提供する関数は `mew-refile-guess-by-alist' です。
The function name to provide this feature is
`mew-refile-guess-by-alist'.



File: mew.ja.info, Node: by-thread, Next: by-from-folder, Prev: by-alist, Up: Refile

対話関係から推測
================

Guess by thread
===============

Mew には、整頓しようとしているメッセージの親のメッセージが以前整頓され
たフォルダを選択してくれる機能があります。Mew provides a mechanism to
guess a folder where the parent message of a current message was
refiled before.

たとえば、pooh、piglet、roo との間で、蜂蜜を取りに行こうという話題が盛
り上がったとしましょう。pooh は、+project/honey というフォルダを作って、
最初のメッセージをそこに整頓したとしましょう。以降、3 人の間のメッセー
ジがきちんとした返答であるかぎり、+project/honey を推測してくれます。
For example, Pooh, Piglet, and Roo had a chat to go and get honey. So,
Pooh made +project/honey then refiled the message to it. The further
messages, if they are properly replied, they are supposed to be
refiled to +project/honey.

あるメッセージをどこに保存したかという情報は、
"~/Mail/.mew-refile-msgid-alist" に保存されています。この情報を過去
何通のメッセージに関して保存するかは、`mew-lisp-max-length' で決定
します。初期値は 2000 通です。3000 通にしたい場合は "~/.mew.el" 中で以
下のように設定して下さい。
Information that which folder was chosen for messages is stored to
"~/Mail/.mew-refile-msgid-alist". `mew-lisp-max-length'
controls the amount of this information. The default value is 2000
messages. If you want limits it to 3000 messages, put the following to
"~/.mew.el".

     (setq mew-lisp-max-length 3000)

この機能を提供する関数は `mew-refile-guess-by-thread' です。
The function name to provide this feature is
`mew-refile-guess-by-message-id'.



File: mew.ja.info, Node: by-from-folder, Next: by-from, Prev: by-thread, Up: Refile

個人用のフォルダから推測
========================

Guess by private folders
========================

*Note by-folder:: で説明したメーリングリスト用のフォルダを推測するに加
えて、個人用のフォルダを推測する機能があります。個人用のフォルダは
+from 以下にありますから、+from 以下のフォルダを選択する機能だともいえ
ます。以下の例を考えてみましょう。In addition to the mechanism to
select a mailing-list folder described in *Note by-folder::, Mew
provides a mechanism to choose a private folder. Since private folders
locate under +from, we can say that this mechanism select a folder
from the folders under +from. Let's see the following example:

     To: pooh@example.net
     From: piglet@example.org

piglet から pooh にメッセージが来ました。pooh がこの機能を使うと、
From: を手がかりに +from/piglet が選択されます。(+from 以下は階層化され
ていても構いません。また、フォルダ名はユーザ名だけではなくアドレス全体
でも OK です。) Pooh received a message from Piglet. If Pooh uses this
mechanism, +from/piglet will be chosen according to From:. (Folders
under +from can be recurse. And you can select the entire address for
a folder name instead of the user part.)

この機能を提供する関数は、`mew-refile-guess-by-from-folder' といいます。
The function to provide this feature is
`mew-refile-guess-by-from-folder'.

次に、pooh が piglet に返答した場合を考えましょう。pooh は自分自身に
Cc: していたので、自分にメッセージが戻ってきました。Next, let's
consider a care where Pooh replied to Piglet. Since Pooh Cc:ed the
message to himself, the message was also delivered to him.

     To: piglet@example.org
     Cc: pooh@example.net
     From: pooh@example.net

pooh の立場になって考えてみて下さい。このメッセージを +from/pooh に整頓
するか、あるいは +from/piglet に整頓するのかは、好みが分かれるところで
しょう。そこで、どちらを選択するのかカスタマイズできるようになっていま
す。How do you feel if you are Pooh? You may want to refile this to
+from/pooh. Also, you may want to move this to +from/piglet. So, it
can be customized.

`mew-refile-guess-from-me-is-special' が `t' なら、
`mew-refile-guess-by-from-folder' は、From: が自分のアドレスの場合に、
To: と Cc: にあるアドレスをもとに、+from 以下のフォルダを選択します。
If `mew-refile-guess-from-me-is-special' is `t' and if an address in
From: is yourself, `mew-refile-guess-by-from-folder' select a folder
under +from according to To: and/or Cc:.



File: mew.ja.info, Node: by-from, Next: by-newsgroups, Prev: by-from-folder, Up: Refile

From: から推測
==============

Guess by From:
==============

From: に同一のアドレスを持つメッセージが、かつてどこに整頓されたかによっ
て推測する機能があります。Mew also provides a mechanism to guess a
folder by the place where a message that has the same From: field is
refiled.

たとえば、piglet は piglet@example.org と p-p-p@example.org の 2 つのア
ドレスを持っているとしましょう。どちらのアドレスからメッセージが届いて
も、pooh はそれらを +from/piglet に整頓したいと思っています。もちろん、
以下のように明示的に規則を書けば実現できます。Suppose that Piglet has
two addresses, piglet@example.org and p-p-p@example.org. Pooh wants to
refile messages from Piglet to +from/piglet no matter what his From:
is. This policy can, of course, be implemented if Pooh specifies rules
explicitly as follows:

     (setq mew-refile-guess-alist
       '(("From:"
           ("piglet@example.org" "+from/piglet")
           ("p-p-p@example.org"  "+from/piglet"))))

しかし、いちいち規則を書くのは面倒です。そこで、まず From: が
piglet@example.org であるメッセージを +from/piglet に整頓します。これで
フォルダ +from/piglet が作成されます。次に、From: が p-p-p@example.org
であるメッセージを +from/piglet に整頓したとします。ここで Mew は、
p-p-p@example.org が +from/piglet に整頓されたことを学習します。以後
From: が p-p-p@example.org であるメッセージを整頓しようとすると、
+from/piglet を選択するようになります。But such a work may bother
you. So, first refile a message whose From: is piglet@example.org to
+from/piglet. At this time, +from/piglet is created. Next, refile a
message whose From: is p-p-p@example.org to +from/piglet. Here Mews
learns that p-p-p@example.org was refiled to +from/piglet. After this,
when messages whose From: is p-p-p@example.org are refiled,
+from/piglet is chosen.

その他、機械からくるメッセージは、いつも +adm/misc に入れることにしたい
場合なども、明示的な規則を書かずに済ませられます。For another example,
you can refile messages from machinery to +adm/misc without defining
an explicit rule.

From: とフォルダの情報は、"~/Mail/.mew-refile-from-alist" に保存されてい
ます。この情報を過去何通のメッセージに関して保存するかは、
*Note by-thread:: と同様に `mew-lisp-max-length' で決定します。
Information for relationship between From: and folder is stored to
"~/Mail/.mew-refile-from-alist". `mew-lisp-max-length'
controls the amount of this information as the same as
*Note by-thread::.

この機能を提供する関数は `mew-refile-guess-by-from' です。
The function name to provide this feature is
`mew-refile-guess-by-from'.

`mew-refile-guess-from-me-is-special' が `t' の場合、
`mew-refile-guess-by-from' は `mew-refile-guess-by-from-folder'(*Note
by-from-folder::)と同様な動きをします。
If the value of `mew-refile-guess-from-me-is-special' is `t',
`mew-refile-guess-by-from' acts as
`mew-refile-guess-by-from-folder' (*Note by-from-folder::).



File: mew.ja.info, Node: by-newsgroups, Next: by-default, Prev: by-from, Up: Refile

Newsgroups: から推測
====================

Guess by Newsgroups:
====================

ニュースをメールとして受信して Mew で読んでいる人のために、Newsgroups:
からフォルダを推測する機能を用意しました。関数名は
`mew-refile-guess-by-newsgroups' です。For those who read articles of
NetNews received by e-mail with Mew, Mew provides a mechanism to guess
a folder by Newsgroups:. The function name to provide this feature is
`mew-refile-guess-by-newsgroups'.



File: mew.ja.info, Node: by-default, Next: guess-rule, Prev: by-newsgroups, Up: Refile

デフォルトの規則
================

Guess by default rule
=====================

デフォルトの規則は、From: からユーザ名を切り出して、`+from/user'
を選ぶようになっています。ただし、
`mew-refile-guess-strip-domainpart' が `nil' ならアドレスを切
り出すので、`+from/user@domain' が選択されます。
`mew-refile-guess-strip-domainpart' の初期値は `t' です。
The default rule is to extract a user name from From: and to choose
`+from/user'. But if `mew-refile-guess-strip-domainpart' is
`nil', it extracts the entire address. So,
`+from/user@domain' is chosen. The default value of
`mew-refile-guess-strip-domainpart' is `t'.

関数名は、`mew-refile-guess-by-default' です。The function name is
`mew-refile-guess-by-default'.



File: mew.ja.info, Node: guess-rule, Next: auto-refile, Prev: by-default, Up: Refile

規則の制御
==========

Controlling rules
=================

Mew では、フォルダ推測の規則を 2 つの変数、`mew-refile-guess-control'
と `mew-refile-ctrl-multi' で制御します。`mew-refile-guess-control' は、
呼び出す関数を順に定義します。候補を複数にしたい場合は
`mew-refile-ctrl-multi' を `t' に、単数にしたい場合は `nil' に設定しま
す。
Mew controls guess rules by two variables,
`mew-refile-guess-control' and `mew-refile-ctrl-multi'. If you
want multiple candidates, set `mew-refile-ctrl-multi'
`t'. Otherwise, set it `nil'.

標準では、`mew-refile-guess-control' は以下のように宣言されています(宣
言なので `defvar' が使われています)。By default,
`mew-refile-guess-control' is declared as follows (since it is a
declaration, `defvar' is used):

     (defvar mew-refile-guess-control
       '(mew-refile-guess-by-alist
         mew-refile-ctrl-throw
         mew-refile-guess-by-newsgroups
         mew-refile-guess-by-folder
         mew-refile-ctrl-throw
         mew-refile-ctrl-auto-boundary
         mew-refile-guess-by-thread
         mew-refile-ctrl-throw
         mew-refile-guess-by-from-folder
         mew-refile-ctrl-throw
         mew-refile-guess-by-from
         mew-refile-ctrl-throw
         mew-refile-guess-by-default))

Mew は `mew-refile-guess-control' に並べられた関数を順番にすべて実行し
ます。各々の関数が複数の候補を推測することがあります。Mew executes
every function defined in `mew-refile-guess-control' in order. Each
function may guess multiple candidates.

`mew-refile-guess-control' の動作例として以下を考えてみましょう。Let's
see the following example of `mew-refile-guess-control' action.

`mew-refile-guess-by-alist'
         が +aaa、+bbb を推測。
`mew-refile-guess-by-folder'
         が +ccc、+ddd を推測。
`mew-refile-guess-by-default'
         が +eee を推測。
`mew-refile-guess-by-alist'
         guessed +aaa and +bbb.
`mew-refile-guess-by-folder'
         guessed +ccc and +ddd.
`mew-refile-guess-by-default'
         guessed +eee.

+aaa 〜 +eee すべてをユーザに提示して欲しい場合は、
`mew-refile-ctrl-multi' を `t' に、+aaa だけを提示して欲しい場合は、
`nil' に設定します。If you want to provide all candidates, +aaa -
+eee, set `mew-refile-ctrl-multi' `t'. If you want to provide +aaa
only, set it `nil'.

また、+aaa 〜 +ddd は提示して欲しいけれどもそれ以降はいらない、つまり、
+eee を提示するのは先に実行された関数群が何も推測できなかったときだけに
したい場合は、`mew-refile-ctrl-multi' を `t' にして、
`mew-refile-guess-by-folder' と `mew-refile-guess-by-default' の間に
`mew-refile-ctrl-throw' を入れて下さい。If you want +aaa - +ddd but do
not want left candidates, in other words, you want +eee only when no
candidate is guessed by functions executed before, set
`mew-refile-ctrl-multi' `t' and insert `mew-refile-ctrl-throw' between
`mew-refile-guess-by-folder' and `mew-refile-guess-by-default'.

`C-uo' は、この推測の流れを Message バッファに表示します。
`C-uo' displays the flow of guess rules in Message buffer.



File: mew.ja.info, Node: auto-refile, Next: copy-msg, Prev: guess-rule, Up: Refile

自動で整理整頓
==============

Auto refile
===========

毎日メッセージをたくさんもらう人は、まだ整頓していないメッセージを
+inbox (あるいは %inbox) フォルダに大量に溜めてしまうことがあります。そ
んなときは、「メッセージ達よ、とにかくこのフォルダからどこかに行ってし
まえ」と叫びたくなることがあるでしょう。Mew は、そんなわがままな人を満
足させるための自動整理整頓関数を提供しています。:) `M-o' がその呪文です。
Those who receives many messages everyday is prone to store thousands of
messages in the +inbox (or %inbox) folder. In such a case, they may want
to speak out like this, "Hey messages, get out of the folder to
somewhere". Mew provides a feature to satisfy such laziness. :)
`M-o' is the spell.

この関数を実行すると、現在のフォルダ内の特定のメッセージに対して、自動的
に `o' マークを付けてくれます。特定のメッセージとは、
`mew-refile-auto-refile-skip-any-mark' が `nil' なら、`o'
や `D' マークが付いていないメッセージです。
`mew-refile-auto-refile-skip-any-mark' が `t' なら、なにもマー
クが付いてない(既読)メッセージです。
`mew-refile-auto-refile-skip-any-mark' の初期値は `nil' です。
When you execute this function, it marks specific messages with
`o'. The specific messages mean messages which are not marked
with `o' nor `D' if
`mew-refile-auto-refile-skip-any-mark' is `nil'. If
`mew-refile-auto-refile-skip-any-mark' is `t', they mean
non-marked messages (i.e. read). The default value of
`mew-refile-auto-refile-skip-any-mark' is `nil'.

`C-uM-o' は、`mew-refile-auto-refile-skip-any-mark' の値とは関係なく
`*' マークの付いたメッセージを対象にします。`C-uM-o' targets messages
marked with `*' regardless the value of
`mew-refile-auto-refile-skip-any-mark'.

整頓先の決定には、先に説明した推測関数群が働くようになっています。この
関数は、`o' を付けるだけですので、`x' を押さない限り実際にメッセージが
どこかに行ってしまうことはありません。
Refile rule is the same described in the previous section. Please note
that what this function does is just mark messages with
`o'. Messages are not refiled until you will press `x'.

Mew の整頓先推測はあまりにも賢すぎるので、この機能には仇となってしまい
ます。というのは、Mew が推測機能をフルに使って勝手に整頓してしまうと、
大抵のユーザはどこにメッセージが整頓されたか分からなくなってしまうから
です。:) そのために、Mew が使う推測関数を制限する機能が提供されています。
前に出てきた宣言をもう一度思い出して下さい。Mew's refile mechanism is
so smart that it would be harmful for this function. That is, most
users would not understand where messages have been refiled if Mew
made most use of its guess mechanism. :) For this reason, break is
provided to limit usage of guess functions. Recall the declaration up
above.

     (defvar mew-refile-guess-control
       '(mew-refile-guess-by-alist
         mew-refile-ctrl-throw
         mew-refile-guess-by-newsgroups
         mew-refile-guess-by-folder
         mew-refile-ctrl-throw
         mew-refile-ctrl-auto-boundary
         mew-refile-guess-by-thread
         mew-refile-ctrl-throw
         mew-refile-guess-by-from-folder
         mew-refile-ctrl-throw
         mew-refile-guess-by-from
         mew-refile-ctrl-throw
         mew-refile-guess-by-default))

`mew-refile-guess-control' の中に `mew-refile-ctrl-auto-boundary' とい
う関数があります。これがその仕掛です。自動整理整頓のときに限り、Mew は
この関数より下に記述してある推測を無視します。
`mew-refile-ctrl-auto-boundary' より上に記述している関数が何も推測でき
なかった場合は、そのメッセージには `o' が付きません。破滅が訪れる前に
`mew-refile-ctrl-auto-boundary' の御札を貼って下さい。
You can find the `mew-refile-ctrl-auto-boundary' function in
`mew-refile-guess-control'. Only when auto refile is used, Mew
ignores guess functions below this function. If guess functions above
`mew-refile-ctrl-auto-boundary' didn't guess any folder for a
message, the message is not marked with `o'. Insert
`mew-refile-ctrl-auto-boundary' before you ruin.




File: mew.ja.info, Node: copy-msg, Next: Virtual, Prev: auto-refile, Up: Refile

世界を越えたメッセージのコピー
==============================

Copying messages across worlds
==============================

これまで説明した整頓とは、同じ世界の中でメッセージを移動させることでし
た。これに対し、ある世界から他の世界へメッセージを移動させたいこともあ
るでしょう。これは、ある世界から他の世界へメッセージへコピーし、その後
元のメッセージを削除することで実現できます。ここでは、ある世界から他の
世界へメッセージへコピーする方法について説明します。"Refile" described
above is moving messages in the same world. By contrast, you may want
to move messages from a world to another world. You can accomplish
this by copying messages from a world to another and deleting the
original messages. Here we describe how to copy messages to another
world.

あるフォルダのメッセージをローカルフォルダへコピーしたくなることがあり
ます。この場合 `lc' を利用して下さい。`lc' は、リモート・フォルダで実行
された場合、キャッシュされたメッセージから、そのリモート・フォルダに特
有の情報をヘッダから取り除き、ローカル・フォルダへコピーします。(`lc'
は、ローカルフォルダでも実行できます。この場合、同じ世界内でのコピーに
なります。) You may want to copy a message to a local folder. For
this, type `lc'. If you execute `lc' in a remote folder, Mew removes
information related to the remote folder from the cached message and
copy it to a local folder. (You can use `lc' in a local folder,
too. In this case, a message is moved in the same world.)

あるフォルダのメッセージを IMAP のフォルダ(サーバ側)へコピーするには、
`li' を利用します。
To opy a message in a folder to an IMAP folder (the server side), type
`li'.

`*' の付いた複数のメッセージをローカル・フォルダへコピーするには`mlc'
を使います。また、`*' の付いた複数のメッセージを IMAP フォルダへコピー
するには `mli' を利用して下さい。To copy messages marked with `*' to a
local folder, use `mlc'.  To copy messages marked with `*' to an IMAP
folder, use `mli'.

ある世界から他の世界へメッセージへコピーするコマンドを以下にまとめます。
Here is a summary of commands which copy messages from a world to
another.

`lc'
     あるフォルダのメッセージをローカルフォルダへコピーする。
`mlc'
     `*' の付いた複数のメッセージをローカル・フォルダへコピーする。
`li'
     あるフォルダのメッセージを IMAP のフォルダへコピーする。
`mli'
     `*' の付いた複数のメッセージを IMAP フォルダへコピーする。
`lc'
     Copy a message to a local folder.
`mlc'
     Copy messages marked with `*' to a local folder.
`li'
     Copy a message to the server side of IMAP.
`mli'
     Copy messages marked with `*' to the server side of IMAP.




File: mew.ja.info, Node: Virtual, Next: selection, Prev: copy-msg, Up: Top

仮想フォルダ
************

Virtual folder
**************

Virtual モードは、必要なメッセージを表示するための仮想的なフォルダであ
り、「セレクション」と「スレッド」の2種類に分類できます。
Virtual mode is a virtual folder and it consists of "selection" and
"thread".

`セレクション'
     いろいろなフォルダから必要なメッセージだけを集めた仮想フォルダです。
     フォルダ名の左側に "*" が付きます。
`スレッド'
     フォルダ(Summary)やセレクション(Virtual)を基に、対話関係を行頭揃え
     によって可視化した仮想フォルダです。フォルダ名の両側に "*" が付き
     ます。
`Selection'
     A virtual folder collecting necessary messages from several
     folders.  Its folder name has "*" on the left side.
`Thread'
     A virtual folder to visualize message flow with indentation,
     created from a folder or a virtual folder. Its folder name has
     *" on the both sides.

Summary モードで利用できるコマンドの多くが、Virtual モードで利用できま
す。In Virtual mode, you can use most commands that you can find in
Summary mode.

Virtual モードでメッセージにマークを付けると、対応する Summary モードが
あれば、そちらのメッセージにもマークが付きます。逆に、Summary モードで
あるメッセージにマークを付けても、Virtual モードの対応するメッセージに
はマークは付きません。If you put a mark on a message in Virtual mode
and if corresponding Summary mode exists, the mark is also put onto
the corresponding message there.  But if you put a mark on a message
in Summary mode, the mark is not put any corresponding messages in
Virtual mode.

Virtual モードからマークを処理することはできません。`x' を押しマークを
処理しようとすると、対応する Summary モードがあれば、そちらに移動し、も
う一度 `x' を押すよう促されます。You cannot process marks in Virtual
mode. Even if you type `x' to process marks in Virtual mode, the
cursor moves to corresponding Summary mode, if exsists, and you are
asked to type `x' again.

仮想フォルダはまさしく仮想であり、ファイルシステムなどには存在しないこ
とに注意して下さい。Emacs を終了すると、仮想フォルダはなくなります。
Virtual モードを消去する方法については、*Note Quit:: を参照して下さい。
You should take note that Virtual folder is really virtual and it does
not exist in file system. If you exit Mew, it then disappears.  To
know how to delete Virtual mode, please refer to *Note Quit::.

* Menu:

* selection::                   セレクション
* sorting::                     ソート
* dialog::                      対話
* search::                      検索
* condition::                   検索条件の入力方法
* dbsearch::                    検索エンジン
* keyword::                     キーワードの強調
* thread::                      スレッド
* thread-op::                   スレッドの操作
* selection::                   Selection
* sorting::                     Sorting
* dialog::                      Dialog
* search::                      Searching
* condition::                   How to input search conditions
* dbsearch::                    Search Engine
* keyword::                     Highlighting a keyword
* thread::                      Thread
* thread-op::                   Thread operations



File: mew.ja.info, Node: selection, Next: sorting, Prev: Virtual, Up: Virtual

セレクション
============

Selection
=========

セレクションは、いろいろなフォルダから必要なメッセージだけを集めた仮想
フォルダです。セレクションの作り方には、以下の 5 つがあります。
Selection is a virtual folder collecting necessary messages from
several folders. There are five ways to create selection:

`m/'
     あるフォルダで、"*" マークが付いているメッセージのみを表示する。
`S'
     あるフォルダで、メッセージをソートして表示する。(元のフォルダには、
     何の影響もない。) *Note sorting:: を参照のこと。
`V'
     現在のメッセージと対話関係にあるメッセージを表示する。*Note
     dialog:: を参照のこと。
`/'
     あるフォルダから、検索条件に合致するメッセージを表示する。*Note
     search:: を参照のこと。
`k/'
     すべてのフォルダから、検索条件に合致するメッセージを表示する。
     *Note dbsearch:: を参照のこと。
`m/'
     Listing messages marked with `*' on a folder. See *Note
     sorting::.
`S'
     Sorting messages on a folder and display them. (No effect to the
     original folder.) See *Note dialog::.
`V'
     Listing messages which have relationship with the current message. See
     *Note dialog::.
`/'
     Listing messaged matched to a search condition on a folder. See
     *Note search::.
`k/'
     Listing messaged matched to a search condition from all folders. See
     *Note search::.




File: mew.ja.info, Node: sorting, Next: dialog, Prev: selection, Up: Virtual

ソート
======

Sorting
=======

メッセージをソートしセレクションを作成するには `S' を使います。このとき
次のようにどのフィールドでソートするか訊いてくるので、ソートしたいフィー
ルド名を入力して下さい。To make selection by sorting messages, use
`S'. Then you will be asked to input the field name as follows:

     Sort by? (default date):

指定したフィールドに書かれている文字列は単純に文字列比較でソートするべ
きではありません。たとえば、Subject: はテキストと考えてよいのですが、
Date: は日付、X-Mail-Count: は数字と考えてソートすべきです。このように
文字列をどう取り扱うかをモードといいます。ソートによく指定されるフィー
ルド名に対するモードは `mew-sort-key-alist' で設定されています。There
are some cases where strings stored in the specified field should not
be compared as text. For example, while Subject: can be considered as
text, Date: and X-Mail-Count: should be treated as date and number,
respectively. In this way, we call the distinctions in methods of
string sorting "modes". Default modes for typical field names are
configured in `mew-sort-key-alist'.

ソートのモードを明示的に指定、変更したい場合には `:' で区切って指定しま
す。たとえば X-Mail-Count: フィールドの内容を(テキストとしてではなく)
数値とみなしてソートしたい場合には、次のように入力します。When you
want to specify the mode of sorting, the mode is followed by `:'. For
example, to sort with the X-Mail-Count: field as arithmetic value (not
text), input like this:

     x-mail-count:num

フィールド名やモードは `TAB' で補完できます。You can complete field
names and modes with `TAB'.

モードには、以下の 4 つがあります。Mew provides four modes for
sorting:

`text'
     先頭の "Re: " や "Fw: " を取り除いた文字列。
`ml'
     text と同じであるが、さらにメーリングリスト特有の文字列も取り除く。
`num'
     数値。
`date'
     日付。
`text'
     String with preceding "Re: " and or "Fw: " removed.
`ml'
     The same as text but preceding mailing-list-string removed.
`num'
     Number.
`date'
     Date.

"Sort by?" と訊かれる際のフィールド名の初期値は、
`mew-sort-default-key' で設定できます。以下は、初期値である"date" を
x-ml-count" に変更する例です。The default field name, your response to
the prompt "Sort by?", can be specified in `mew-sort-default-key'. The
following example changes the default value from "date" to
x-ml-count".

     (setq mew-sort-default-key "x-ml-count")

`mew-sort-default-key-alist' で、フォルダごとにフィールド名の初期値を設
定することもできます。ここで指定しなかったフォルダでは、フィールド名の
初期値として `mew-sort-default-key' の値が使われます。以下は、+inbox フォ
ルダでの初期値を "subject" に、+mew-dist フォルダでの初期値を
x-mail-count" に変更する例です。You can also set a default field name
for each folder by `mew-sort-default-key-alist'. For folders not
explicitly specified here, `mew-sort-default-key' is used for their
default field name.  The following is an example that specifies
subject" for the +inbox folder and "x-mail-count" for the +mew-dist
folder.

     (setq mew-sort-default-key-alist
           '(("+inbox" "subject")
             ("+mew-dist" "x-mail-count")))

なお、ローカル・フォルダでメッセージを本当にソートするためには`M-s' を
使って下さい。このコマンドは、リモート・フォルダでは利用できません。To
really sort messages in a local folder, use `M-s'. This command is not
available in remote folders.



File: mew.ja.info, Node: dialog, Next: search, Prev: sorting, Up: Virtual

対話
====

Dialog
======

Mew では、あるメッセージに関係するメッセージをさまざまなフォルダから集
めて仮想フォルダに一覧表示できます。これを「対話」と呼びましょう。後ほ
ど説明するスレッド(*Note thread::)とは、以下の点で異なります。Mew can
list messages which have relationship with the current message. Let's
call this "dialog". This is different from thread described later in
the following points:


   - スレッドは、1つのフォルダ/仮想フォルダに対してのみ作成できる。対話
     は、関連するメッセージが複数のフォルダに散らばっていてもよい。

   - スレッドは、行頭揃えによって木構造を可視化する。対話は、日付順に一
     覧表示する。
   - Thread can be made from one folder or one virtual
     folder. Messages relating to dialog can ubiquitously exists in
     several folders.

   - Thread visualizes tree structres with indentation. while dialog
     lists up messages in order of time.

対話の機能を使うには、まず `kI' を実行し、データベースを作る必要があり
ます。新しく届くメッセージはデータベースに入らないので、`kI' は定期的に
実行して下さい。`kI' は、データベースを差分更新します。この方式は早いの
ですが、ゴミが残ることは避けられないので、ときどき`C-ukI' を実行し、デー
タベースを一から作り直して下さい。To use the feature of dialog,
execute `kI' to create database. New messages are not automatically
registered in to the database, you should periodically execute
`kI'. `kI' updates the database incrementally by default. This method
is fast but garbages are left. So, sometime you should type `C-ukI' to
update the database fully.

対話を作成するには、注目しているメッセージの上で `V' を押します。このコ
マンドは、自分の子孫と、自分の先祖、そして自分だけを表示します。自分の
兄弟などは表示しません。一族全体を表示したいなら、一旦作った仮想フォル
ダの一番上にあるメッセージ、すなわち一族の祖の上で、もう一度`V' を実行
して下さい。To make dialog, type `V' on the current message. This
command displays him, his ancestors, and his children only. His
brothers and so on are not shown. If you display the entire of the
family, type `V' again on the first message of the dialog, which is
the origin of the family.



File: mew.ja.info, Node: search, Next: condition, Prev: dialog, Up: Virtual

検索
====

Searching
=========

Mew では、以下のようなメッセージの検索機能を提供しています。Mew
provides the following method to search messages:

`?'
     現在のフォルダで、条件に合致したメッセージに `*' マークを付ける。
     入力された条件によって、`mewl' か `grep' のどちらかが呼ばれる。
`C-u?'
     リージョンを指定した `?'。
`/'
     現在のフォルダで、条件に合致したメッセージからセレクションを作る。
     入力された条件によって、`mewl' か `grep' のどちらかが呼ばれる。
`C-u/'
     リージョンを指定した `C-u/'。
`?'
     Put the `*' mark onto messages in this follder, which are matched
     to a specified pattern. Either `mewl' or `grep' is called
     according to the specified pattern.
`C-u?'
     `?' with a region specified.
`/'
     Make selection with messages in this follder, which are matched
     to a specified pattern. Either `mewl' or `grep' is called
     according to the specified pattern.
`C-u/'
     `/' with a region specified.

また、Spotlight や Windows Desktop Search などの検索エンジンを利用した
検索も可能です。これには、以下のコマンドがあります。We can also search
messages with a search engine, including Spotlight, Windows Desktop
Search, etc. This feature is supported by the following commands.

`k?'
     現在のフォルダで、条件に合致したメッセージに `*' マークを付ける。
`k/'
     全フォルダに対し、条件に合致したメッセージからセレクションを作る。
`C-uk/'
     指定されたフォルダに対し、条件に合致したメッセージからセレクション
     を作る。フォルダを複数指定するには "," で区切る。ワイルドカードと
     して、"*" を利用できる。
`k?'
     Put the `*' mark onto messages in this follder, which are matched
     to a specified pattern.
`k/'
     Make selection with messages in all folders, which are matched to
     a specified pattern.
`C-uk/'
     Make selection with messages in specified folders, which are
     matched to a specified pattern. If you want to specify multiple
     folders, separate them with ",". You can also use a wildcar "*".



File: mew.ja.info, Node: condition, Next: dbsearch, Prev: search, Up: Virtual

検索条件の入力方法
==================

How to input search conditions
==============================

`?' や `/' を実行すると、Mew はユーザに対し以下のように検索のパターンを
訊きます。If you type `?' or `/', Mew asks you to input search pattern
as follows:

     mewl/grep pick pattern:

単純に「文字列」を 1 つ入力すると、Mew は `grep' を呼び出します。また、
「条件式」を入力すると、`mewl' を呼び出します。If you specify just a
keyword, Mew executes `grep'.  On the contrast if you type an
expression, Mew calls `mewl'.

条件式の書式を以下に示します。(結合力の強い順に並んでいます。) Here is
a list of expression elements. (In the strong order)

`field=string'
     フィールド field に文字列 string が含まれているときマッチ(大文字小
     文字を区別しない)。field に "head" を指定した場合は、ヘッダ全体を
     意味する。
`field==string'
     フィールド field に文字列 string が含まれているときマッチ(大文字小
     文字を区別する)。field に "head" を指定した場合は、ヘッダ全体を意
     味する。
`field!=string'
     フィールド field に文字列 string が含まれていないときマッチ(大文字
     小文字を区別しない)。field に "head" を指定した場合は、ヘッダ全体
     を意味する。
`field!==string'
     フィールド field に文字列 string が含まれていないときマッチ(大文字
     小文字を区別する)。field に "head" を指定した場合は、ヘッダ全体を
     意味する。
`( <pattern> )'
     <pattern> の内容を先に評価。
`! <pattern>'
     <pattern> でないときマッチ。
`<pattern1> & <pattern2>'
     <pattern1> かつ <pattern2> のときマッチ。省略可能。
`<pattern1> | <pattern2>'
     <pattern1> または <pattern2> のときマッチ。
`field=string'
     Match if the "field" field contains the "string" string
     (case-insensitive). If you specify "head", it means the entire
     header.
`field==string'
     Match if the "field" field contains the "string" string
     (case-sensitive). If you specify "head", it means the entire
     header.
`field!=string'
     Match if the "field" field does not the "string" string
     (case-insensitive). If you specify "head", it means the entire
     header.
`field!==string'
     Match if the "field" field does not the "string" string
     (case-sensitive). If you specify "head", it means the entire
     header.
`( <pattern> )'
     Evaluate <pattern> first.
`! <pattern>'
     Match if not <pattern>.
`<pattern1> & <pattern2>'
     Match if <pattern1> AND <pattern2>. You can omit this.
`<pattern1> | <pattern2>'
     Match if <pattern1> OR <pattern2>.

以下に例を示します。Some examples are shown below.

(a) From: に kazu が含まれるメッセージ(a) Messages whose From:
contains "kazu".

     from=kazu

(b) To: が mew、または、Cc: が mew であるメッセージ(b) Messages whose
To: contains "mew" OR Cc: contains "mew".

     to=mew | cc=mew

(c) To: が mew、または、Cc: が mew で、かつ、from が kazu であるメッセー
ジ(c) Messages whose To: contains "mew" OR Cc: contains "mew" AND
From: contains "kazu".

     (to=mew | cc=mew) & from=kazu

`?' や `/' で、パターンに入力の際に単純に `RET' を押すと、以下のように
利用するコマンドまで入力できるようになります。When you execute `?' or
`/' and if you just type `RET' to a pattern, you can specify a command
to be executed.

     Cmd opts pattern: grep -l -e

`k?' や `k/' で検索エンジンを利用する場合は、上記のパターン(文字列や条
件式)が自動的に検索エンジンの書式に変換されます。When you use an
search engine with `k?' or `k/', the pattern (including just a keyword
and an expression) will be converted to the syntax of the search
engine.

たとえば、kazu から来たメールで、「wine」を含み、かつ「bordeaux」を含ま
ないという条件式は以下のように書きます。For example, you can write an
expression, that From: is "kazu" and body contains "wine" but does not
contain "bordeaux", as follows:

     from=kazu wine ! bordeaux

なお、`mew-pick-pattern-list' にパターンのリストを定義しておくと、
`C-cTAB' で各要素を循環的に補完できます。この場合、リストの先頭がデフォ
ルトとして表示されます。If you set `mew-pick-pattern-list' to a list
of pattern, you can enjoy circular completion with `C-cTAB'. In this
case, the first member is displayed as a default value.

日本語の全文検索をしたい場合は、("grep" の代わりに) "mg" をインストール
し、以下のように設定して下さい。

     (setq mew-prog-grep "mg")
     (setq mew-prog-grep-opts '("-j" "jis" "-l" "-e" "-x" "&mime"))



File: mew.ja.info, Node: dbsearch, Next: keyword, Prev: condition, Up: Virtual

検索エンジン
============

Search Engine
=============

検索エンジンを操作するために以下のコマンドが用意されています。To
operate search engines, the following commands are provided:

`km'
     そのフォルダのインデックスを作る。
`kM'
     全体のフォルダのインデックスを作る。あるいは、作るために初期化する。
`kc'
     検索エンジンを切り替える。
`km'
     Make index for the current folder.
`kM'
     Make index for all folders.
`kc'
     Switch one search engine to another.

以下に、それぞれの検索エンジンの説明を示します。The followings are
expiation of each search engines.

`Hyper Estraier'
     定期的に `kM' を実行する必要があります。コマンドラインで、
     mewest" を実行しても構いません。あるフォルダのインデックスを急いで
     更新したいなら `km' でもよいでしょう。`k?' と`k/' の両方が利用でき
     ます。`C-uk/'でフォルダを指定すると、サブディレクトリも検索になり
     ます。
`Spotlight'
     一度だけ `kM' を実行する必要があります。`km' は必要ありません。
     `k?' と `k/' の両方が利用できます。
`Windows Desktop Search'
     一度だけ `kM' を実行する必要があります。`km' は必要ありません。
`Google Desktop'
     一度だけ `kM' を実行する必要があります。`km' は必要ありません。
     `k/' のみが利用できます。
`Hyper Estraier'
     Type `kM' periodically. It's OK to execute "mewest" on the
     command line instead. If you want to update the index for the
     current folder quickly, you can use `km'. Both `k?' and `k/' are
     available. When you specify folders with `C-uk/', sub-folders, if
     any, are included in the target.
`Spotlight'
     Type `kM' just once. `km' is not necessary. Both `k?'  and `k/'
     are available.
`Windows Desktop Search'
     Type `kM' just once. `km' is not necessary.
`Google Desktop'
     Type `kM' just once. `km' is not necessary. Only `k/' is
     available.

検索エンジンの初期値は、最初に見つかった利用できるものに自動的に設定さ
れます。明示的に指定したい場合は、`mew-search-method'
に'est、'spotlight、'wds, 'google のどれかを指定して下さい。以下は、
Hyper Estraier に設定する例です。The default search engine is
automatically set to the one found first.  If you explicitly specify
it, set `mew-search-method' to one out of 'est, 'spotlight, 'wds, and
'google. The following is an example to choose Hyper Estraier.

     (setq mew-search-method 'est)



File: mew.ja.info, Node: keyword, Next: thread, Prev: dbsearch, Up: Virtual

キーワードの強調
================

Highlighting a keyword
======================

検索に使ったキーワードは、バッファに保存されています。メッセージを表示
し、さらにキーワードをハイライトすることができます。この機能を提供する
コマンドは以下の通りです。The keyword which you specified on search is
shorted in a buffer. You can display messages with the keyword
highlighted. The commands to enable this functionality are as follows:

`M-n'
     下方向のメッセージへ移動しキーワードをハイライトして表示。Summary
     モードでは `*' マークのついたメッセージが、Virtual モードではすべ
     てのメッセージが対象となる。このコマンドを繰り返し利用すると、キー
     ワードの付近が次々と表示されていく。キーワードが設定されていないな
     ら、ユーザにキーワードを訊く。
`C-uM-n'
     キーワードを明示的に設定できること以外は、`M-n' に同じ。
`M-p'
     `M-n' を逆方向にしたコマンド。
`C-uM-p'
     `C-uM-n' を逆方向にしたコマンド。
`M-n'
     Display a message in the forward direction and find a keyword and
     highlight it. In Summary mode, the target is messages marked with
     `*'. In Virtual mode, it is all messages. If you repeat this
     command, text around the keyword is displayed from one to
     another. If no key word is set to the variable, this command
     first asks you a keyword.
`C-uM-n'
     The same as `M-n' except that you can change the stored keyword
     explicitly.
`M-p'
     A reverse version of `M-n'.
`C-uM-p'
     A reverse version of `C-uM-n'.



